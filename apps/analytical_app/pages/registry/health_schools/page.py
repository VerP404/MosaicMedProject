# -*- coding: utf-8 -*-
"""
–ê–ù–ê–õ–ò–ó –®–ö–û–õ –ó–î–û–†–û–í–¨–Ø
Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —à–∫–æ–ª –∑–¥–æ—Ä–æ–≤—å—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–æ–≤—ã—Ö —è–≤–æ–∫ –ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
"""

import pandas as pd
from datetime import datetime, date, timedelta
from dash import html, dcc, Input, Output, State, callback_context, dash_table, no_update
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc
from apps.analytical_app.app import app
from apps.analytical_app.query_executor import execute_query

type_page = "health_schools"

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
DISEASE_GROUPS = {
    'I1%': '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è',
    'I5%': '–°–µ—Ä–¥–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å', 
    'J4%': '–ë—Ä–æ–Ω—Ö–∏–∞–ª—å–Ω–∞—è –∞—Å—Ç–º–∞',
    'E1%': '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç'
}

def get_health_schools_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —à–∫–æ–ª –∑–¥–æ—Ä–æ–≤—å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    query = """
    SELECT 
        enp,
        patient,
        birth_date,
        treatment_end,
        main_diagnosis_code,
        goal,
        department,
        doctor,
        specialty
    FROM load_data_oms_data 
    WHERE goal = '307'
    ORDER BY enp, treatment_end DESC
    """
    
    try:
        result = execute_query(query)
        
        if not result:
            return pd.DataFrame()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ DataFrame
        columns = ['enp', 'patient', 'birth_date', 'treatment_end', 'main_diagnosis_code', 
                  'goal', 'department', 'doctor', 'specialty']
        df = pd.DataFrame(result, columns=columns)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        df['treatment_end'] = pd.to_datetime(df['treatment_end'], errors='coerce')
        df['birth_date'] = pd.to_datetime(df['birth_date'], errors='coerce')
        
        return df
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def determine_disease_group(diagnosis_code):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ø–æ –∫–æ–¥—É –¥–∏–∞–≥–Ω–æ–∑–∞"""
    if pd.isna(diagnosis_code):
        return None
    
    diagnosis_str = str(diagnosis_code)
    for pattern, group_name in DISEASE_GROUPS.items():
        if diagnosis_str.startswith(pattern.replace('%', '')):
            return group_name
    
    return None

def process_health_schools_data(df):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —à–∫–æ–ª –∑–¥–æ—Ä–æ–≤—å—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º"""
    if df.empty:
        return pd.DataFrame()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
    df['disease_group'] = df['main_diagnosis_code'].apply(determine_disease_group)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
    df_filtered = df[df['disease_group'].notna()].copy()
    
    if df_filtered.empty:
        return pd.DataFrame()
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ï–ù–ü –∏ –≥—Ä—É–ø–ø–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
    result_data = []
    
    for (enp, disease_group), group_df in df_filtered.groupby(['enp', 'disease_group']):
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
        latest_record = group_df.iloc[0]
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–ª–∞–Ω–æ–≤—É—é –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π —è–≤–∫–∏ (—á–µ—Ä–µ–∑ –≥–æ–¥)
        last_visit = latest_record['treatment_end']
        if pd.notna(last_visit):
            planned_visit = last_visit + timedelta(days=365)
            days_until_planned = (planned_visit.date() - date.today()).days
        else:
            planned_visit = None
            days_until_planned = None
        
        result_data.append({
            'enp': enp,
            'patient': latest_record['patient'],
            'birth_date': latest_record['birth_date'].strftime('%d.%m.%Y') if pd.notna(latest_record['birth_date']) else '',
            'disease_group': disease_group,
            'last_visit': last_visit.strftime('%d.%m.%Y') if pd.notna(last_visit) else '',
            'planned_visit': planned_visit.strftime('%d.%m.%Y') if planned_visit else '',
            'days_until_planned': days_until_planned,
            'department': latest_record['department'],
            'doctor': latest_record['doctor'],
            'specialty': latest_record['specialty'],
            'status': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ' if days_until_planned and days_until_planned < 0 else 
                     '–°–∫–æ—Ä–æ' if days_until_planned and days_until_planned <= 30 else 
                     '–í —Å—Ä–æ–∫' if days_until_planned else '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'
        })
    
    return pd.DataFrame(result_data)

def build_search_card():
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    return dbc.Card([
        dbc.CardHeader([
            html.H5("üîç –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", className="mb-0")
        ]),
        dbc.CardBody([
            dbc.Row([
                dbc.Col([
                    html.Label("–ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏–ª–∏ –ï–ù–ü:", style={"font-weight": "bold"}),
                    dbc.InputGroup([
                        dbc.Input(
                            id=f"search-input-{type_page}",
                            placeholder="–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ –ï–ù–ü...",
                            type="text"
                        ),
                        dbc.Button(
                            "–ù–∞–π—Ç–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤",
                            id=f"search-patients-button-{type_page}",
                            color="primary",
                            n_clicks=0
                        )
                    ])
                ], width=12, md=8),
                dbc.Col([
                    dbc.Button(
                        "–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫",
                        id=f"clear-button-{type_page}",
                        color="secondary",
                        outline=True,
                        className="mt-4"
                    )
                ], width=12, md=4)
            ], className="mb-3")
        ])
    ], className="mb-4")

def build_patient_selection_card():
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    return dbc.Card([
        dbc.CardHeader([
            html.H5("üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", className="mb-0")
        ]),
        dbc.CardBody([
            html.Div(id=f"patients-list-container-{type_page}")
        ])
    ], className="mb-4")

def build_records_filter_card():
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π"""
    return dbc.Card([
        dbc.CardHeader([
            html.H5("üè• –§–∏–ª—å—Ç—Ä –∑–∞–ø–∏—Å–µ–π –ø–æ —à–∫–æ–ª–∞–º –∑–¥–æ—Ä–æ–≤—å—è", className="mb-0")
        ]),
        dbc.CardBody([
            dbc.Row([
                dbc.Col([
                    html.Label("–ì—Ä—É–ø–ø–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:", style={"font-weight": "bold"}),
                    dcc.Dropdown(
                        id=f"disease-group-filter-{type_page}",
                        options=[
                            {'label': '–í—Å–µ –≥—Ä—É–ø–ø—ã', 'value': 'all'},
                            {'label': '–ê—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–∞—è –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è', 'value': 'I1%'},
                            {'label': '–°–µ—Ä–¥–µ—á–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å', 'value': 'I5%'},
                            {'label': '–ë—Ä–æ–Ω—Ö–∏–∞–ª—å–Ω–∞—è –∞—Å—Ç–º–∞', 'value': 'J4%'},
                            {'label': '–°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç', 'value': 'E1%'}
                        ],
                        value='all',
                        clearable=False
                    )
                ], width=12, md=6),
                dbc.Col([
                    dbc.Button(
                        "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏",
                        id=f"show-records-button-{type_page}",
                        color="success",
                        className="mt-4"
                    )
                ], width=12, md=6)
            ])
        ])
    ], className="mb-4")

def build_stats_cards(df):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    if df.empty:
        return html.Div()
    
    total_patients = df['enp'].nunique()
    overdue_count = len(df[df['status'] == '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'])
    soon_count = len(df[df['status'] == '–°–∫–æ—Ä–æ'])
    
    return dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4(total_patients, className="text-primary mb-0"),
                    html.P("–í—Å–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", className="text-muted mb-0")
                ])
            ], className="text-center")
        ], width=4),
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4(overdue_count, className="text-danger mb-0"),
                    html.P("–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ —è–≤–æ–∫", className="text-muted mb-0")
                ])
            ], className="text-center")
        ], width=4),
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    html.H4(soon_count, className="text-warning mb-0"),
                    html.P("–°–∫–æ—Ä–æ —è–≤–∫–∞", className="text-muted mb-0")
                ])
            ], className="text-center")
        ], width=4)
    ], className="mb-4")

def build_patients_list(patients_df):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    if patients_df.empty:
        return dbc.Alert("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", color="info")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ï–ù–ü –∏ –±–µ—Ä–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    unique_patients = patients_df.groupby('enp').first().reset_index()
    
    return dbc.Card([
        dbc.CardHeader([
            html.H5(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {len(unique_patients)}", className="mb-0")
        ]),
        dbc.CardBody([
            dash_table.DataTable(
                id=f"patients-list-{type_page}",
                data=unique_patients[['patient', 'enp', 'birth_date']].to_dict('records'),
                columns=[
                    {"name": "–§–ò–û", "id": "patient", "type": "text"},
                    {"name": "–ï–ù–ü", "id": "enp", "type": "text"},
                    {"name": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "id": "birth_date", "type": "text"}
                ],
                page_size=10,
                sort_action="native",
                style_cell={
                    "textAlign": "left",
                    "minWidth": "150px",
                    "whiteSpace": "normal",
                    "fontSize": "12px"
                },
                style_header={
                    "fontWeight": "bold",
                    "backgroundColor": "#f8f9fa"
                },
                row_selectable="single",
                selected_rows=[],
                style_data_conditional=[
                    {
                        'if': {'state': 'selected'},
                        'backgroundColor': '#e3f2fd',
                        'border': '1px solid #2196f3'
                    }
                ]
            )
        ])
    ], className="mb-4")

def build_patient_records_table(records_df):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–ø–∏—Å—è–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
    if records_df.empty:
        return dbc.Alert("–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", color="info")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ –ø–ª–∞–Ω–æ–≤–æ–π —è–≤–∫–∏
    records_df_sorted = records_df.sort_values(['status', 'planned_visit'], ascending=[True, True])
    
    return dash_table.DataTable(
        id=f"patient-records-table-{type_page}",
        data=records_df_sorted.to_dict('records'),
        columns=[
            {"name": "–ì—Ä—É–ø–ø–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "id": "disease_group", "type": "text"},
            {"name": "–ü–æ—Å–ª–µ–¥–Ω—è—è —è–≤–∫–∞", "id": "last_visit", "type": "text"},
            {"name": "–ü–ª–∞–Ω–æ–≤–∞—è —è–≤–∫–∞", "id": "planned_visit", "type": "text"},
            {"name": "–î–Ω–µ–π –¥–æ —è–≤–∫–∏", "id": "days_until_planned", "type": "numeric"},
            {"name": "–°—Ç–∞—Ç—É—Å", "id": "status", "type": "text"},
            {"name": "–û—Ç–¥–µ–ª–µ–Ω–∏–µ", "id": "department", "type": "text"},
            {"name": "–í—Ä–∞—á", "id": "doctor", "type": "text"},
            {"name": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", "id": "specialty", "type": "text"}
        ],
        page_size=20,
        sort_action="native",
        filter_action="native",
        style_cell={
            "textAlign": "left",
            "minWidth": "120px",
            "maxWidth": "200px",
            "whiteSpace": "normal",
            "fontSize": "12px"
        },
        style_header={
            "fontWeight": "bold",
            "backgroundColor": "#f8f9fa"
        },
        style_data_conditional=[
            {
                'if': {'filter_query': '{status} = –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ'},
                'backgroundColor': '#ffebee',
                'color': 'black',
            },
            {
                'if': {'filter_query': '{status} = –°–∫–æ—Ä–æ'},
                'backgroundColor': '#fff3e0',
                'color': 'black',
            }
        ],
        export_format="xlsx",
        style_table={
            "height": "400px",
            "overflowY": "auto",
            "overflowX": "auto",
            "border": "1px solid #dee2e6",
            "borderRadius": "0.375rem"
        },
        fixed_rows={"headers": True}
    )

# Layout —Å—Ç—Ä–∞–Ω–∏—Ü—ã
health_schools_page = html.Div([
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    dbc.Row([
        dbc.Col([
            html.H2("üè• –ê–Ω–∞–ª–∏–∑ —à–∫–æ–ª –∑–¥–æ—Ä–æ–≤—å—è", className="mb-4"),
            html.P("–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤—ã—Ö —è–≤–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —à–∫–æ–ª–∞—Ö –∑–¥–æ—Ä–æ–≤—å—è", 
                   className="text-muted mb-4")
        ], width=12)
    ], className="px-3"),
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∏—Å–∫–∞
    dbc.Row([
        dbc.Col([
            build_search_card()
        ], width=12)
    ], className="px-3"),
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    dbc.Row([
        dbc.Col([
            build_patient_selection_card()
        ], width=12)
    ], className="px-3"),
    
    # –ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π
    dbc.Row([
        dbc.Col([
            build_records_filter_card()
        ], width=12)
    ], className="px-3"),
    
    # –ó–∞–ø–∏—Å–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader([
                    html.H5("üìã –ó–∞–ø–∏—Å–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞", className="mb-0")
                ]),
                dbc.CardBody([
                    html.Div(id=f"patient-records-container-{type_page}")
                ])
            ])
        ], width=12)
    ], className="px-3")
])

# Callback –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
@app.callback(
    Output(f"patients-list-container-{type_page}", "children"),
    Input(f"search-patients-button-{type_page}", "n_clicks"),
    Input(f"clear-button-{type_page}", "n_clicks"),
    State(f"search-input-{type_page}", "value"),
    prevent_initial_call=True
)
def search_patients(search_clicks, clear_clicks, search_term):
    ctx = callback_context
    if not ctx.triggered:
        raise PreventUpdate
    
    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
    
    # –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    if trigger_id == f"clear-button-{type_page}":
        return html.Div()
    
    # –ü–æ–∏—Å–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
    if trigger_id == f"search-patients-button-{type_page}":
        if not search_term or len(search_term.strip()) < 2:
            return dbc.Alert("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", color="warning")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df_raw = get_health_schools_data()
        if df_raw.empty:
            return dbc.Alert("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", color="info")
        
        df_processed = process_health_schools_data(df_raw)
        if df_processed.empty:
            return dbc.Alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∫–æ–ª–∞–º –∑–¥–æ—Ä–æ–≤—å—è", color="info")
        
        # –ü–æ–∏—Å–∫ –ø–æ –§–ò–û –∏–ª–∏ –ï–ù–ü
        search_term_lower = search_term.lower()
        mask = (
            df_processed['patient'].str.lower().str.contains(search_term_lower, na=False) |
            df_processed['enp'].str.contains(search_term, na=False)
        )
        found_patients = df_processed[mask]
        
        if found_patients.empty:
            return dbc.Alert("–ü–∞—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", color="info")
        
        # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
        patients_list = build_patients_list(found_patients)
        
        return patients_list
    
    return no_update

# Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–ø–∏—Å–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
@app.callback(
    Output(f"patient-records-container-{type_page}", "children"),
    Input(f"show-records-button-{type_page}", "n_clicks"),
    Input(f"patients-list-{type_page}", "selected_rows"),
    State(f"patients-list-{type_page}", "data"),
    State(f"disease-group-filter-{type_page}", "value"),
    prevent_initial_call=True
)
def show_patient_records(show_clicks, selected_rows, patients_data, disease_filter):
    ctx = callback_context
    if not ctx.triggered:
        raise PreventUpdate
    
    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏"
    if trigger_id == f"show-records-button-{type_page}":
        if not selected_rows or not patients_data:
            return dbc.Alert("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞", color="warning")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        selected_patient = patients_data[selected_rows[0]]
        selected_enp = selected_patient['enp']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        df_raw = get_health_schools_data()
        if df_raw.empty:
            return dbc.Alert("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", color="info")
        
        df_processed = process_health_schools_data(df_raw)
        if df_processed.empty:
            return dbc.Alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∫–æ–ª–∞–º –∑–¥–æ—Ä–æ–≤—å—è", color="info")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–∞—Ü–∏–µ–Ω—Ç—É
        patient_records = df_processed[df_processed['enp'] == selected_enp]
        
        if patient_records.empty:
            return dbc.Alert(f"–ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {selected_patient['patient']} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", color="info")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
        if disease_filter != 'all':
            patient_records = patient_records[patient_records['disease_group'] == DISEASE_GROUPS[disease_filter]]
        
        if patient_records.empty:
            return dbc.Alert(f"–ó–∞–ø–∏—Å–∏ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ {selected_patient['patient']} –≤ –≥—Ä—É–ø–ø–µ {DISEASE_GROUPS[disease_filter]} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", color="info")
        
        # –°—Ç—Ä–æ–∏–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π
        records_table = build_patient_records_table(patient_records)
        
        return html.Div([
            html.H6(f"–ü–∞—Ü–∏–µ–Ω—Ç: {selected_patient['patient']} (–ï–ù–ü: {selected_enp})", className="mb-3"),
            records_table
        ])
    
    return no_update

# Callback –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞
@app.callback(
    Output(f"search-input-{type_page}", "value"),
    Input(f"clear-button-{type_page}", "n_clicks"),
    prevent_initial_call=True
)
def clear_search(clear_clicks):
    if clear_clicks:
        return ""
    raise PreventUpdate
