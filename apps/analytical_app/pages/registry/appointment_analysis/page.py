# -*- coding: utf-8 -*-
"""
–ê–ù–ê–õ–ò–ó –ó–ê–ü–ò–°–ê–ù–ù–´–• –ù–ê –ü–†–ò–ï–ú
Dash-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É —Å–ø–∏—Å–∫–æ–º –ï–ù–ü –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
"""

import pandas as pd
import chardet
import io
import base64
from datetime import datetime
from dash import html, dcc, Input, Output, State, callback_context, dash_table, no_update
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc
from apps.analytical_app.app import app

type_page = "appointment_analysis"


def detect_encoding(file_content):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞"""
    result = chardet.detect(file_content)
    return result['encoding']


def read_csv_with_encoding(file_content, encoding):
    """–ß–∏—Ç–∞–µ—Ç CSV —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    encodings_to_try = [encoding, 'utf-8', 'cp1251', 'windows-1251', 'iso-8859-1']

    for enc in encodings_to_try:
        try:
            return pd.read_csv(io.StringIO(file_content.decode(enc)), sep=';', dtype=str)
        except (UnicodeDecodeError, UnicodeError):
            continue

    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–º–µ–Ω–∞ —Ç–≤–æ–µ–≥–æ stats_html)
def build_stats_card(stats):
    total_enp = stats['total_enp_records']
    total_req = stats['total_requests_records']
    unique_enp = stats['unique_enp_in_file']
    unique_req = stats['unique_requests_in_file']
    common = stats['common_enp']
    result = stats['result_records']
    enp_field = stats.get('enp_field_used', '–ï–ù–ü')

    return dbc.Card(
        dbc.CardBody([
            html.H5("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä–∫–∏", className="mb-3"),

            html.P(
                f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–æ –ø–æ–ª—é ¬´{enp_field}¬ª. ",
                className="text-muted small"
            ),

            dbc.Row([
                dbc.Col([
                    html.H6("–§–∞–π–ª —Å –ï–ù–ü - —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π/–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤", className="mb-2"),
                    html.Div(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π - —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {total_enp}", className="mb-1"),
                    html.Div(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π/–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –ï–ù–ü: {unique_enp}", className="mb-1"),
                ], md=4),

                dbc.Col([
                    html.H6("–§–∞–π–ª –∏–∑ –º–æ–¥—É–ª—è –æ–±—Ä–∞—â–µ–Ω–∏–π - –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –ø—Ä–∏–µ–º", className="mb-2"),
                    html.Div(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π - —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {total_req}", className="mb-1"),
                    html.Div(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π/–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –ï–ù–ü: {unique_req}", className="mb-1"),
                ], md=4),

                dbc.Col([
                    html.H6("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª—é–¥–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –ø—Ä–∏–µ–º", className="mb-2"),
                    html.Div(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π - –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –ø—Ä–∏–µ–º: {result}", className="mb-1"),
                    html.Div(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π/–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ - –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –ø—Ä–∏–µ–º: {common}", className="mb-1"),
                ], md=4),
            ])
        ]),
        className="shadow-sm mb-4"
    )


def process_data(enp_df, requests_df, enp_field='–ï–ù–ü'):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ï–ù–ü –≤ Excel —Ñ–∞–π–ª–µ
        if enp_field not in enp_df.columns:
            return None, f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ —Å –ï–ù–ü –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ '{enp_field}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {enp_df.columns.tolist()}"

        if '–ï–ù–ü' not in requests_df.columns:
            return None, f"–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ '–ï–ù–ü'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {requests_df.columns.tolist()}"

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—É—Å—Ç—ã—Ö –ï–ù–ü
        enp_clean = enp_df.dropna(subset=[enp_field])
        requests_clean = requests_df.dropna(subset=['–ï–ù–ü'])

        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        enp_set = set(enp_clean[enp_field].astype(str).str.replace('.0', '').str.strip())
        requests_set = set(requests_clean['–ï–ù–ü'].astype(str).str.replace('.0', '').str.strip())
        common_enp = enp_set.intersection(requests_set)

        if len(common_enp) == 0:
            return None, "–û–±—â–∏—Ö –ï–ù–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
        requests_clean = requests_clean.copy()
        requests_clean['–ï–ù–ü_str'] = requests_clean['–ï–ù–ü'].astype(str).str.replace('.0', '').str.strip()
        result_df = requests_clean[requests_clean['–ï–ù–ü_str'].isin(common_enp)]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ "–ü—Ä–∏–µ–º" —Å –¥–∞—Ç–æ–π
        if '–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞' in result_df.columns:
            result_df = result_df.copy()
            result_df['–ü—Ä–∏–µ–º'] = pd.to_datetime(result_df['–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞'], format='%Y-%m-%dT%H:%M',
                                                errors='coerce').dt.date

        # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
        if '–ï–ù–ü_str' in result_df.columns:
            result_df = result_df.drop('–ï–ù–ü_str', axis=1)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_enp_records': len(enp_df),
            'total_requests_records': len(requests_df),
            'unique_enp_in_file': len(enp_set),
            'unique_requests_in_file': len(requests_set),
            'common_enp': len(common_enp),
            'result_records': len(result_df),
            'enp_field_used': enp_field
        }

        return result_df, stats

    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"


# Layout —Å—Ç—Ä–∞–Ω–∏—Ü—ã
appointment_analysis_page = html.Div([
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    dbc.Row([
        dbc.Col([
            html.H2("–ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–∏–µ–º", className="mb-4"),
            html.P("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å –ï–ù–ü (Excel) –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏ (CSV) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π",
                   className="text-muted mb-4")
        ], width=12)
    ], className="px-3"),

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"),
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            html.Label("–§–∞–π–ª —Å –ï–ù–ü –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–∏–µ–º (Excel)",
                                       style={"font-weight": "bold"}),
                            dcc.Upload(
                                id=f"upload-enp-{type_page}",
                                children=html.Div([
                                    "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ ",
                                    html.A("–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
                                ]),
                                style={
                                    "width": "100%",
                                    "height": "60px",
                                    "lineHeight": "60px",
                                    "borderWidth": "1px",
                                    "borderStyle": "dashed",
                                    "borderRadius": "5px",
                                    "textAlign": "center",
                                    "margin": "10px"
                                },
                                multiple=False,
                                accept=".xlsx,.xls"
                            ),
                            html.Div(id=f"enp-loading-{type_page}", className="mt-2"),
                            html.Div(id=f"enp-file-info-{type_page}", className="mt-2"),
                            html.Div(id=f"enp-field-selector-{type_page}", className="mt-2")
                        ], width=12, md=6, className="mb-3 mb-md-0"),
                        dbc.Col([
                            html.Label("–§–∞–π–ª –∏–∑ –º–æ–¥—É–ª—è –û–±—Ä–∞—â–µ–Ω–∏—è –ö–≤–∞–∑–∞—Ä (CSV)", style={"font-weight": "bold"}),
                            dcc.Upload(
                                id=f"upload-requests-{type_page}",
                                children=html.Div([
                                    "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ ",
                                    html.A("–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª")
                                ]),
                                style={
                                    "width": "100%",
                                    "height": "60px",
                                    "lineHeight": "60px",
                                    "borderWidth": "1px",
                                    "borderStyle": "dashed",
                                    "borderRadius": "5px",
                                    "textAlign": "center",
                                    "margin": "10px"
                                },
                                multiple=False,
                                accept=".csv"
                            ),
                            html.Div(id=f"requests-loading-{type_page}", className="mt-2"),
                            html.Div(id=f"requests-file-info-{type_page}", className="mt-2")
                        ], width=12, md=6)
                    ]),
                    dbc.Row([
                        dbc.Col([
                            dbc.Button(
                                "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                id=f"analyze-button-{type_page}",
                                color="primary",
                                className="mt-3",
                                disabled=True
                            )
                        ], width=12)
                    ])
                ])
            ])
        ], width=12)
    ], className="mb-4 px-3"),

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    dbc.Row([
        dbc.Col([
            html.Div(id=f"loading-indicator-{type_page}")
        ], width=12)
    ], className="mb-3 px-3"),

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞"),
                dbc.CardBody([
                    html.Div(id=f"analysis-results-{type_page}"),
                    html.Div(id=f"analysis-table-{type_page}")
                ])
            ])
        ], width=12)
    ], className="px-3")
])


# Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ Excel —Ñ–∞–π–ª–∞
@app.callback(
    Output(f"enp-loading-{type_page}", "children"),
    Input(f"upload-enp-{type_page}", "contents"),
    prevent_initial_call=True
)
def show_enp_loading(contents):
    if contents is None:
        raise PreventUpdate

    return dbc.Alert([
        dbc.Spinner(
            html.Div([
                html.Strong("üì§ –ó–∞–≥—Ä—É–∂–∞—é Excel —Ñ–∞–π–ª..."),
                html.Br(),
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
            ])
        )
    ], color="info", className="mb-2")


# Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ï–ù–ü
@app.callback(
    Output(f"enp-loading-{type_page}", "children", allow_duplicate=True),
    Output(f"enp-file-info-{type_page}", "children"),
    Output(f"enp-field-selector-{type_page}", "children"),
    Output(f"analyze-button-{type_page}", "disabled"),
    Input(f"upload-enp-{type_page}", "contents"),
    State(f"upload-enp-{type_page}", "filename"),
    prevent_initial_call=True
)
def handle_enp_upload(contents, filename):
    if contents is None:
        return "", "", "", True

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        content_type, content_string = contents.split(',')
        decoded = base64.b64decode(content_string)

        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        df = pd.read_excel(io.BytesIO(decoded))

        info = dbc.Alert([
            html.Strong(f"‚úÖ {filename}"),
            html.Br(),
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}",
            html.Br(),
            f"–ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns.tolist())}"
        ], color="success", className="mb-0")

        # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–ª–µ–π
        field_options = [{'label': col, 'value': col} for col in df.columns.tolist()]
        field_selector = html.Div([
            html.Label("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ —Å –ï–ù–ü:", style={"font-weight": "bold", "font-size": "0.9rem"}),
            dcc.Dropdown(
                id=f"enp-field-dropdown-{type_page}",
                options=field_options,
                value=field_options[0]['value'] if field_options else None,
                clearable=False,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ...",
                style={"font-size": "0.9rem"}
            )
        ])

        return "", info, field_selector, False

    except Exception as e:
        error = dbc.Alert([
            html.Strong(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}"),
            html.Br(),
            str(e)
        ], color="danger", className="mb-0")
        return "", error, "", True


# Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV —Ñ–∞–π–ª–∞
@app.callback(
    Output(f"requests-loading-{type_page}", "children"),
    Input(f"upload-requests-{type_page}", "contents"),
    prevent_initial_call=True
)
def show_requests_loading(contents):
    if contents is None:
        raise PreventUpdate

    return dbc.Alert([
        dbc.Spinner(
            html.Div([
                html.Strong("üì§ –ó–∞–≥—Ä—É–∂–∞—é CSV —Ñ–∞–π–ª..."),
                html.Br(),
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"
            ])
        )
    ], color="info", className="mb-2")


# Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏
@app.callback(
    Output(f"requests-loading-{type_page}", "children", allow_duplicate=True),
    Output(f"requests-file-info-{type_page}", "children"),
    Output(f"analyze-button-{type_page}", "disabled", allow_duplicate=True),
    Input(f"upload-requests-{type_page}", "contents"),
    State(f"upload-requests-{type_page}", "filename"),
    prevent_initial_call=True
)
def handle_requests_upload(contents, filename):
    if contents is None:
        return "", "", True

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
        content_type, content_string = contents.split(',')
        decoded = base64.b64decode(content_string)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        encoding = detect_encoding(decoded)

        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        df = read_csv_with_encoding(decoded, encoding)

        info = dbc.Alert([
            html.Strong(f"‚úÖ {filename}"),
            html.Br(),
            f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}",
            html.Br(),
            f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞: {encoding}",
            html.Br(),
            f"–ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns.tolist())}"
        ], color="success", className="mb-0")

        return "", info, False

    except Exception as e:
        error = dbc.Alert([
            html.Strong(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}"),
            html.Br(),
            str(e)
        ], color="danger", className="mb-0")
        return "", error, True


# Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
@app.callback(
    Output(f"loading-indicator-{type_page}", "children"),
    Input(f"analyze-button-{type_page}", "n_clicks"),
    prevent_initial_call=True
)
def show_loading_indicator(n_clicks):
    if n_clicks is None:
        raise PreventUpdate

    return dbc.Alert([
        dbc.Spinner(
            html.Div([
                html.Strong("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ..."),
                html.Br(),
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
            ])
        )
    ], color="info", className="mb-3")


# Callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
@app.callback(
    Output(f"loading-indicator-{type_page}", "children", allow_duplicate=True),
    Output(f"analysis-results-{type_page}", "children"),
    Output(f"analysis-table-{type_page}", "children"),
    Input(f"analyze-button-{type_page}", "n_clicks"),
    State(f"upload-enp-{type_page}", "contents"),
    State(f"upload-requests-{type_page}", "contents"),
    State(f"enp-field-dropdown-{type_page}", "value"),
    prevent_initial_call=True
)
def analyze_data(n_clicks, enp_contents, requests_contents, enp_field):
    if n_clicks is None or enp_contents is None or requests_contents is None:
        raise PreventUpdate

    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        _, enp_string = enp_contents.split(',')
        enp_decoded = base64.b64decode(enp_string)
        enp_df = pd.read_excel(io.BytesIO(enp_decoded))

        _, requests_string = requests_contents.split(',')
        requests_decoded = base64.b64decode(requests_string)
        encoding = detect_encoding(requests_decoded)
        requests_df = read_csv_with_encoding(requests_decoded, encoding)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        result_df, stats = process_data(enp_df, requests_df, enp_field)

        if result_df is None:
            # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            error_alert = dbc.Alert([
                html.Strong("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"),
                html.Br(),
                stats
            ], color="danger")
            return "", error_alert, ""

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_html = build_stats_card(stats)
        stats_html2 = dbc.Row([
            dbc.Col([
                dbc.Card([
                    dbc.CardBody([
                        html.H5("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", className="card-title"),
                        html.P([
                            html.Strong("–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ —Å –ï–ù–ü: "), str(stats['total_enp_records']), html.Br(),
                            html.Strong("–ó–∞–ø–∏—Å–µ–π –≤ —Ñ–∞–π–ª–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏: "), str(stats['total_requests_records']),
                            html.Br(),
                            html.Strong("–ü–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ï–ù–ü: "), str(stats.get('enp_field_used', '–ï–ù–ü')), html.Br(),
                            html.Strong("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ï–ù–ü –≤ —Ñ–∞–π–ª–µ —Å –ï–ù–ü: "), str(stats['unique_enp_in_file']), html.Br(),
                            html.Strong("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ï–ù–ü –≤ —Ñ–∞–π–ª–µ —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏: "),
                            str(stats['unique_requests_in_file']), html.Br(),
                            html.Strong("–û–±—â–∏—Ö –ï–ù–ü: "), str(stats['common_enp']), html.Br(),
                            html.Strong("–ó–∞–ø–∏—Å–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: "), str(stats['result_records'])
                        ])
                    ])
                ])
            ], width=12)
        ])

        # –¢–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        table = dash_table.DataTable(
            id=f"results-table-{type_page}",
            data=result_df.to_dict('records'),
            columns=[{"name": i, "id": i} for i in result_df.columns],
            page_size=15,
            sort_action="native",
            filter_action="native",
            style_cell={"textAlign": "left", "minWidth": "120px", "maxWidth": "400px", "whiteSpace": "normal"},
            style_header={"fontWeight": "bold"},
            export_format="xlsx",
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            style_table={
                "height": "500px",
                "overflowY": "auto",
                "overflowX": "auto",
                "border": "1px solid #dee2e6",
                "borderRadius": "0.375rem"
            },
            fixed_rows={"headers": True},
            virtualization=True
        )

        return "", stats_html, table

    except Exception as e:
        error_alert = dbc.Alert([
            html.Strong("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"),
            html.Br(),
            str(e)
        ], color="danger")
        return "", error_alert, ""
