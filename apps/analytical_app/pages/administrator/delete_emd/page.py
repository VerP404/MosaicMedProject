from dash import dcc, html, dash_table, callback_context
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import requests
import json
from datetime import datetime, date
import os
import openpyxl
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
import io
import base64

from apps.analytical_app.app import app, DJANGO_API_BASE
from flask import request


def format_date_for_display(date_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD –≤ DD.MM.YYYY"""
    if not date_str:
        return None
    try:
        if isinstance(date_str, str):
            date_obj = datetime.strptime(date_str, '%Y-%m-%d').date()
        else:
            date_obj = date_str
        return date_obj.strftime('%d.%m.%Y')
    except:
        return date_str


def format_date_for_api(date_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ YYYY-MM-DD"""
    if not date_str:
        return None
    try:
        if isinstance(date_str, str) and '.' in date_str:
            date_obj = datetime.strptime(date_str, '%d.%m.%Y').date()
        else:
            date_obj = date_str
        return date_obj.strftime('%Y-%m-%d')
    except:
        return date_str


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ date –¥–ª—è DatePickerSingle
def to_date_obj(value):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ 'YYYY-MM-DD' –∏–ª–∏ 'DD.MM.YYYY', –∞ —Ç–∞–∫–∂–µ date/None -> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç date –∏–ª–∏ None"""
    if not value:
        return None
    try:
        if isinstance(value, date):
            return value
        if isinstance(value, str):
            if '.' in value:
                return datetime.strptime(value, '%d.%m.%Y').date()
            return datetime.strptime(value, '%Y-%m-%d').date()
        return value
    except:
        return None

# API —Ñ—É–Ω–∫—Ü–∏–∏
def resolve_api_base() -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π URL Django API —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:
    1) –Ø–≤–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DJANGO_API_BASE
    2) –¢–µ–∫—É—â–∏–π —Ö–æ—Å—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (X-Forwarded-Host/Proto —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è) + –ø–æ—Ä—Ç –∏–∑ DJANGO_API_PORT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8000)
    """
    explicit_base = os.getenv('DJANGO_API_BASE') or DJANGO_API_BASE
    if explicit_base:
        return explicit_base.rstrip('/')

    try:
        scheme = request.headers.get('X-Forwarded-Proto') or getattr(request, 'scheme', 'http') or 'http'
        host_header = request.headers.get('X-Forwarded-Host') or getattr(request, 'host', '')
        hostname = host_header.split(':')[0] if host_header else '127.0.0.1'
    except Exception:
        scheme = 'http'
        hostname = '127.0.0.1'

    api_port = os.getenv('DJANGO_API_PORT', '8000')
    return f"{scheme}://{hostname}:{api_port}"
def get_api_data(endpoint):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ endpoint
        if endpoint.endswith('/'):
            endpoint = endpoint[:-1]
        base = resolve_api_base()
        url = f'{base}/reports/api/{endpoint}/'
        print(f"DEBUG: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {url}")
        response = requests.get(url)
        print(f"DEBUG: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {len(data) if data else 0} –∑–∞–ø–∏—Å–µ–π")
            return data
        else:
            print(f"DEBUG: –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return []
    except Exception as e:
        print(f"DEBUG: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return []

def post_api_data(endpoint, data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    try:
        if endpoint.endswith('/'):
            endpoint = endpoint[:-1]
        base = resolve_api_base()
        response = requests.post(f'{base}/reports/api/{endpoint}/', json=data, timeout=15)
        return response.status_code == 201, response.json() if response.status_code == 201 else response.text
    except Exception as e:
        return False, f'EXC: {e}'

def put_api_data(endpoint, id, data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    try:
        if endpoint.endswith('/'):
            endpoint = endpoint[:-1]
        base = resolve_api_base()
        response = requests.put(f'{base}/reports/api/{endpoint}/{id}/', json=data, timeout=15)
        return response.status_code == 200, response.json() if response.status_code == 200 else response.text
    except Exception as e:
        return False, f'EXC: {e}'

def delete_api_data(endpoint, id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API"""
    try:
        base = resolve_api_base()
        response = requests.delete(f'{base}/reports/api/{endpoint}/{id}/')
        return response.status_code == 204
    except:
        return False


def create_excel_export(record_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π CSV —Ñ–∞–π–ª
        headers = [
            "OID –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "OID –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
            "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
            "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            "–ù–æ–º–µ—Ä –≤ —Ä–µ–µ—Å—Ç—Ä–µ –†–≠–ú–î",
            "–õ–æ–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
            "–ü—Ä–∏—á–∏–Ω–∞ —Å–∫—Ä—ã—Ç–∏—è –≠–ú–î",
            "–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ –≤–∑–∞–º–µ–Ω"
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        # –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–µ—Ä–µ–º OID –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        oid_medical_org = record_data.get('oid_medical_organization_oid', '') \
            or record_data.get('oid_medical_organization', '')
        oid_document = record_data.get('oid_document', '')
        creation_date = format_date_for_display(record_data.get('creation_date', ''))
        registration_date = format_date_for_display(record_data.get('registration_date', ''))
        reestr_number = record_data.get('reestr_number', '')
        local_identifier = record_data.get('local_identifier', '')
        reason_text = record_data.get('reason_not_actual_text', '') or record_data.get('reason_not_actual', '')
        document_number = record_data.get('document_number', '') or ''
        
        # –°–æ–∑–¥–∞–µ–º CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ; –¥–ª—è Excel RU)
        csv_content = []
        csv_content.append(';'.join(headers))
        csv_content.append(';'.join([
            str(oid_medical_org),
            str(oid_document),
            str(creation_date),
            str(registration_date),
            str(reestr_number),
            str(local_identifier),
            str(reason_text),
            str(document_number)
        ]))
        
        csv_text = '\n'.join(csv_content)
        print(f"DEBUG: CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {csv_text}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é - Dash —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É
        return csv_text
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        raise e


admin_delete_emd = dbc.Container([
           # –°–∫—Ä—ã—Ç—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
           dcc.Store(id='init-trigger', data=0),
           # –°–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞–ø–∏—Å–∏
           dcc.Store(id='edit-record-id', data=None),
           
           # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
           dbc.Row([
               dbc.Col([
                   html.H2("üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≠–ú–î", className="mb-4"),
                   dbc.ButtonGroup([
                       dbc.Button("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", id="btn-create", color="success", size="sm"),
                       dbc.Button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", id="btn-edit", color="primary", size="sm", disabled=True),
                       dbc.Button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", id="btn-export", color="info", size="sm", disabled=True)
                   ], className="mb-3")
               ])
           ]),
    
    # –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardBody([
                    dbc.Row([
                        dbc.Col([
                            dbc.InputGroup([
                                dbc.InputGroupText("üîç"),
                                dbc.Input(id="search-input", placeholder="–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç—É, –ï–ù–ü...", type="text")
                            ])
                        ], width=6),
                        dbc.Col([
                            dbc.Select(
                                id="status-filter",
                                options=[
                                    {"label": "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "value": "all"},
                                    {"label": "–ß–µ—Ä–Ω–æ–≤–∏–∫", "value": "draft"},
                                    {"label": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "value": "sent"},
                                    {"label": "–û–±—Ä–∞–±–æ—Ç–∞–Ω", "value": "processed"},
                                    {"label": "–û—Ç–∫–ª–æ–Ω–µ–Ω", "value": "rejected"}
                                ],
                                value="all"
                            )
                        ], width=3),
                        dbc.Col([
                            dbc.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", id="btn-refresh", color="secondary", size="sm")
                        ], width=3)
                    ])
                ])
            ])
        ])
    ], className="mb-3"),
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
    dbc.Row([
        dbc.Col([
            dbc.Card([
                dbc.CardHeader([
                    html.H5("üìä –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", className="mb-0"),
                    html.Small("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", className="text-muted")
                ]),
                dbc.CardBody([
                    dash_table.DataTable(
                        id='delete-emd-table',
                        columns=[
                                   {'name': '–ü–∞—Ü–∏–µ–Ω—Ç', 'id': 'patient'},
                                   {'name': '–ï–ù–ü', 'id': 'enp'},
                                   {'name': '–ù–æ–º–µ—Ä –≤ —Ä–µ–µ—Å—Ç—Ä–µ –†–≠–ú–î', 'id': 'reestr_number'},
                                   {'name': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', 'id': 'creation_date'},
                                   {'name': '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'id': 'registration_date'},
                                   {'name': '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–ó', 'id': 'sent_to_mz_date'},
                                   {'name': '–°—Ç–∞—Ç—É—Å', 'id': 'status_display'},
                                   {'name': '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π', 'id': 'responsible'}
                               ],
                        data=[],
                        sort_action="native",
                        filter_action="native",
                        page_action="native",
                        page_current=0,
                        page_size=20,
                        row_selectable="single",
                        selected_rows=[],
                        style_table={'overflowX': 'auto'},
                        style_cell={'textAlign': 'left', 'padding': '8px'},
                        style_header={'backgroundColor': '#f8f9fa', 'fontWeight': 'bold'},
                        style_data_conditional=[
                            {
                                'if': {'filter_query': '{status} = draft'},
                                'backgroundColor': '#fff3cd',
                                'color': 'black',
                            },
                            {
                                'if': {'filter_query': '{status} = sent'},
                                'backgroundColor': '#d1ecf1',
                                'color': 'black',
                            },
                            {
                                'if': {'filter_query': '{status} = processed'},
                                'backgroundColor': '#d4edda',
                                'color': 'black',
                            },
                            {
                                'if': {'filter_query': '{status} = rejected'},
                                'backgroundColor': '#f8d7da',
                                'color': 'black',
                            }
                        ],
                    )
                ])
            ])
                ])
            ]),
    
    # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    dbc.Modal([
        dbc.ModalHeader(dbc.ModalTitle(id="modal-title")),
        dbc.ModalBody([
            dbc.Tabs([
                dbc.Tab([
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("OID –¥–æ–∫—É–º–µ–Ω—Ç–∞ *"),
                            dbc.Input(id="modal-oid-document", type="text", required=True),
                            dbc.FormText("–ü–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã –ù–æ–º–µ—Ä–∞ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –†–≠–ú–î - –¥–æ —Ç–æ—á–∫–∏")
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è *"),
                            dcc.DatePickerSingle(id="modal-creation-date", date=datetime.now().date(), display_format="DD.MM.YYYY")
                        ], width=6)
                    ], className="mb-3"),
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ *"),
                            dcc.DatePickerSingle(id="modal-registration-date", date=datetime.now().date(), display_format="DD.MM.YYYY")
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–ù–æ–º–µ—Ä –≤ —Ä–µ–µ—Å—Ç—Ä–µ –†–≠–ú–î *"),
                            dbc.Input(id="modal-reestr-number", type="text", required=True),
                            dbc.FormText("–ñ—É—Ä–Ω–∞–ª –≠–ú–î: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä")
                        ], width=6)
                    ], className="mb-3"),
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–õ–æ–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä *"),
                            dbc.Input(id="modal-local-identifier", type="text", required=True),
                            dbc.FormText("–ñ—É—Ä–Ω–∞–ª –≠–ú–î: –∏–º—è xml-—Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –Ω–∞–ø—Ä.: 3e765e5d-acfc-4e44-b834-7a876acbe40c")
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–ü—Ä–∏—á–∏–Ω–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è *"),
                            dcc.Dropdown(id="modal-reason-dropdown", options=[])
                        ], width=6)
                    ], className="mb-3"),
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∑–∞–º–µ–Ω"),
                            dbc.Input(id="modal-document-number", type="text")
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è *"),
                            dcc.Dropdown(id="modal-medical-org-dropdown", options=[])
                        ], width=6)
                    ], className="mb-3")
                ], label="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", tab_id="tab-basic"),
                
                dbc.Tab([
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–ü–∞—Ü–∏–µ–Ω—Ç *"),
                            dbc.Input(id="modal-patient", type="text", required=True)
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *"),
                            dcc.DatePickerSingle(id="modal-date-of-birth", date=datetime.now().date(), display_format="DD.MM.YYYY")
                        ], width=6)
                    ], className="mb-3"),
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–ï–ù–ü *"),
                            dbc.Input(id="modal-enp", type="text", required=True)
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–¶–µ–ª—å –û–ú–° *"),
                            dbc.Input(id="modal-goal-input", type="text", required=True)
                        ], width=6)
                    ], className="mb-3"),
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–û–∫–æ–Ω—á–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è *"),
                            dcc.DatePickerSingle(id="modal-treatment-end", date=datetime.now().date(), display_format="DD.MM.YYYY")
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π *"),
                            dbc.Input(id="modal-responsible-input", type="text", required=True),
                            dbc.FormText("–¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ: —É–∫–∞–∂–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
                        ], width=6)
                    ], className="mb-3")
                ], label="–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞", tab_id="tab-patient"),
                
                dbc.Tab([
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–°—Ç–∞—Ç—É—Å *"),
                            dcc.Dropdown(
                                id="modal-status-dropdown",
                                options=[
                                    {"label": "–ß–µ—Ä–Ω–æ–≤–∏–∫", "value": "draft"},
                                    {"label": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "value": "sent"},
                                    {"label": "–û–±—Ä–∞–±–æ—Ç–∞–Ω", "value": "processed"},
                                    {"label": "–û—Ç–∫–ª–æ–Ω–µ–Ω", "value": "rejected"}
                                ],
                                value="draft"
                            )
                        ], width=6),
                        dbc.Col([
                            dbc.Label("–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–ó"),
                            dcc.DatePickerSingle(id="modal-sent-to-mz-date", date=None, display_format="DD.MM.YYYY")
                        ], width=6)
                    ], className="mb-3"),
                    dbc.Row([
                        dbc.Col([
                            dbc.Label("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
                            dbc.Textarea(id="modal-comment", placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏...")
                        ], width=12)
                    ], className="mb-3")
                ], label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", tab_id="tab-management")
            ])
        ]),
        dbc.ModalFooter([
            dbc.Button("‚ùå –û—Ç–º–µ–Ω–∞", id="modal-cancel", color="secondary", className="me-2"),
            dbc.Button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", id="modal-save", color="primary")
        ])
    ], id="modal-edit", is_open=False, size="xl"),
    
    # –°–∫—Ä—ã—Ç—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    dcc.Download(id="download-excel"),
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    dbc.Toast(
        id="toast-notification",
        header="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        is_open=False,
        dismissable=True,
        icon="success",
        duration=4000,
        style={"position": "fixed", "top": 66, "right": 10, "width": 350, "z-index": 99999}
    )
], fluid=True)


# Callback –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã
@app.callback(
    Output('delete-emd-table', 'data'),
    [Input('btn-refresh', 'n_clicks'),
     Input('search-input', 'value'),
     Input('status-filter', 'value'),
     Input('btn-create', 'n_clicks'),
     Input('init-trigger', 'data')],
    prevent_initial_call=False
)
def update_table_data(btn_refresh, search_value, status_filter, btn_create, init_data):
    # –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    data = get_api_data('delete-emd/')
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ API: {len(data) if data else 0} –∑–∞–ø–∏—Å–µ–π")
    if data:
        print(f"DEBUG: –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å ID: {data[0].get('id', 'N/A') if data else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
    
    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not data:
        print("DEBUG: –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        return []

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status_filter and status_filter != 'all':
        data = [item for item in data if item.get('status') == status_filter]

    # –ü–æ–∏—Å–∫
    if search_value:
        search_lower = search_value.lower()
        data = [item for item in data if
                search_lower in item.get('patient', '').lower() or
                search_lower in item.get('enp', '').lower()]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for item in data:
        if 'creation_date' in item:
            item['creation_date'] = format_date_for_display(item.get('creation_date'))
        if 'registration_date' in item:
            item['registration_date'] = format_date_for_display(item.get('registration_date'))
        if 'sent_to_mz_date' in item:
            item['sent_to_mz_date'] = format_date_for_display(item.get('sent_to_mz_date'))

    print(f"DEBUG: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(data)} –∑–∞–ø–∏—Å–µ–π")
    return data


# Callback –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è dropdown'–æ–≤)
@app.callback(
    [Output('modal-reason-dropdown', 'options'),
     Output('modal-medical-org-dropdown', 'options')],
    [Input('btn-create', 'n_clicks'),
     Input('delete-emd-table', 'selected_rows'),
     Input('modal-edit', 'is_open')]
)
def load_modal_data(btn_create, selected_rows, modal_is_open):
    ctx = callback_context
    if not ctx.triggered:
        raise PreventUpdate
    
    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if trigger_id in ['btn-create', 'delete-emd-table', 'modal-edit']:
        print("DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏...")
        reasons = get_api_data('invalidation-reasons/')
        medical_orgs = get_api_data('medical-organizations/')
        
        print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ - –ø—Ä–∏—á–∏–Ω—ã: {len(reasons)}, –º–µ–¥.–æ—Ä–≥: {len(medical_orgs)}")

        reason_options = [{'label': item['reason_text'], 'value': item['id']} for item in reasons]
        medical_org_options = [{'label': item['name'], 'value': item['id']} for item in medical_orgs]
        
        print(f"DEBUG: –û–ø—Ü–∏–∏ –ø—Ä–∏—á–∏–Ω: {len(reason_options)} —à—Ç.")
        print(f"DEBUG: –û–ø—Ü–∏–∏ –º–µ–¥.–æ—Ä–≥: {len(medical_org_options)} —à—Ç.")

        return (reason_options, medical_org_options)
    
    raise PreventUpdate


# Callback –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "–≠–∫—Å–ø–æ—Ä—Ç"
@app.callback(
    [Output('btn-edit', 'disabled'),
     Output('btn-export', 'disabled')],
    [Input('delete-emd-table', 'selected_rows')],
    prevent_initial_call=True
)
def toggle_buttons(selected_rows):
    is_disabled = len(selected_rows) == 0
    return is_disabled, is_disabled


# Callback –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
@app.callback(
    [Output('modal-edit', 'is_open'),
     Output('modal-title', 'children'),
     Output('modal-oid-document', 'value'),
     Output('modal-creation-date', 'date'),
     Output('modal-registration-date', 'date'),
     Output('modal-reestr-number', 'value'),
     Output('modal-local-identifier', 'value'),
     Output('modal-reason-dropdown', 'value'),
     Output('modal-document-number', 'value'),
     Output('modal-medical-org-dropdown', 'value'),
     Output('modal-patient', 'value'),
     Output('modal-date-of-birth', 'date'),
     Output('modal-enp', 'value'),
     Output('modal-goal-input', 'value'),
     Output('modal-treatment-end', 'date'),
     Output('modal-responsible-input', 'value'),
     Output('modal-status-dropdown', 'value'),
            Output('modal-sent-to-mz-date', 'date'),
     Output('modal-comment', 'value'),
     Output('edit-record-id', 'data')],
    [Input('btn-create', 'n_clicks'),
     Input('btn-edit', 'n_clicks'),
     Input('modal-cancel', 'n_clicks')],
    [State('delete-emd-table', 'data'),
     State('delete-emd-table', 'selected_rows')]
)
def toggle_modal(btn_create, btn_edit, btn_cancel, table_data, selected_rows):
    ctx = callback_context
    if not ctx.triggered:
        return False, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", None, "", None

    trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if trigger_id == 'btn-create':
        today = datetime.now().date()
        return True, "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É", "", today, today, "", "", "", "", "", "", today, "", "", today, "", "draft", None, "", None
    elif trigger_id == 'btn-edit' and selected_rows:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
        row_idx = selected_rows[0]
        if row_idx < len(table_data):
            item = table_data[row_idx]
            print(f"DEBUG: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {item['id']} —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
            print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {item.get('id', 'N/A')} - {item.get('patient', 'N/A')}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è DatePickerSingle
            creation_date = to_date_obj(item.get('creation_date', ''))
            registration_date = to_date_obj(item.get('registration_date', ''))
            date_of_birth = to_date_obj(item.get('date_of_birth', ''))
            treatment_end = to_date_obj(item.get('treatment_end', ''))
            sent_to_mz_date = to_date_obj(item.get('sent_to_mz_date', ''))
            
            # —É–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–µ–π to_date_obj
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            goal_text = item.get('goal_name', '') or item.get('goal', '')
            responsible_text = item.get('responsible_name', '') or item.get('responsible', '')
            
            return True, f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É #{item['id']}", \
                   item.get('oid_document', ''), \
                   creation_date, \
                   registration_date, \
                   item.get('reestr_number', ''), \
                   item.get('local_identifier', ''), \
                   item.get('reason_not_actual', ''), \
                   item.get('document_number', ''), \
                   item.get('oid_medical_organization', ''), \
                   item.get('patient', ''), \
                   date_of_birth, \
                   item.get('enp', ''), \
                   goal_text, \
                   treatment_end, \
                   responsible_text, \
                   item.get('status', 'draft'), \
                   sent_to_mz_date, \
                   item.get('comment', ''), \
                   item['id']
    elif trigger_id == 'modal-cancel':
        return False, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", None, "", None

    return False, "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", None, "", None


# Callback –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
@app.callback(
    [Output('modal-edit', 'is_open', allow_duplicate=True),
     Output('toast-notification', 'is_open'),
     Output('toast-notification', 'children'),
     Output('toast-notification', 'icon'),
     Output('delete-emd-table', 'data', allow_duplicate=True)],
    [Input('modal-save', 'n_clicks')],
    [State('modal-oid-document', 'value'),
     State('modal-creation-date', 'date'),
     State('modal-registration-date', 'date'),
     State('modal-reestr-number', 'value'),
     State('modal-local-identifier', 'value'),
     State('modal-reason-dropdown', 'value'),
     State('modal-document-number', 'value'),
     State('modal-medical-org-dropdown', 'value'),
     State('modal-patient', 'value'),
     State('modal-date-of-birth', 'date'),
     State('modal-enp', 'value'),
     State('modal-goal-input', 'value'),
     State('modal-treatment-end', 'date'),
     State('modal-responsible-input', 'value'),
     State('modal-status-dropdown', 'value'),
     State('modal-sent-to-mz-date', 'date'),
     State('modal-comment', 'value'),
     State('edit-record-id', 'data')],
    prevent_initial_call=True
)
def save_data(n_clicks, oid_document, creation_date, registration_date, reestr_number, 
             local_identifier, reason, document_number, medical_org, patient, 
             date_of_birth, enp, goal, treatment_end, responsible, status, sent_to_mz_date, comment, edit_id):
    
    if not n_clicks:
        raise PreventUpdate
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = {
        'oid_document': oid_document,
        'creation_date': format_date_for_api(creation_date),
        'registration_date': format_date_for_api(registration_date),
        'reestr_number': reestr_number,
        'local_identifier': local_identifier,
        'reason_not_actual': reason,
        'document_number': document_number,
        'oid_medical_organization': medical_org,
        'patient': patient,
        'date_of_birth': format_date_for_api(date_of_birth),
        'enp': enp,
        'goal': goal,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        'treatment_end': format_date_for_api(treatment_end),
        'responsible': responsible,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        'status': status,
        'sent_to_mz_date': format_date_for_api(sent_to_mz_date),
        'comment': comment
    }
    
    # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å—Å—è
    if edit_id:
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        data.pop('created_by', None)  # –£–±–∏—Ä–∞–µ–º created_by –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        data.pop('added_date', None)  # –£–±–∏—Ä–∞–µ–º added_date –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏: {edit_id or '–Ω–æ–≤–∞—è'}")
    print(f"DEBUG: ID –∑–∞–ø–∏—Å–∏: {edit_id}")
    
    if edit_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        print(f"DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ {edit_id}")
        success, result = put_api_data('delete-emd', edit_id, data)
        print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: success={success}, result={result}")
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            updated_data = get_api_data('delete-emd/')
            return False, True, f"‚úÖ –ó–∞—è–≤–∫–∞ #{edit_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", "success", updated_data
        else:
            return True, True, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {result}", "danger", []
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        print("DEBUG: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
        success, result = post_api_data('delete-emd/', data)
        print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è: success={success}, result={result}")
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
            updated_data = get_api_data('delete-emd/')
            return False, True, "‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", "success", updated_data
        else:
            return True, True, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏: {result}", "danger", []


# Callback –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
@app.callback(
    [Output('download-excel', 'data'),
     Output('toast-notification', 'is_open', allow_duplicate=True),
     Output('toast-notification', 'children', allow_duplicate=True),
     Output('toast-notification', 'icon', allow_duplicate=True)],
    [Input('btn-export', 'n_clicks')],
    [State('delete-emd-table', 'selected_rows'),
     State('delete-emd-table', 'data')],
    prevent_initial_call=True
)
def export_to_excel(n_clicks, selected_rows, table_data):
    if not n_clicks or not selected_rows:
        raise PreventUpdate
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        row_idx = selected_rows[0]
        if row_idx < len(table_data):
            record = table_data[row_idx]
            print(f"DEBUG: –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–∏ {record.get('id', 'unknown')}")
            print(f"DEBUG: –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {record.get('patient', 'N/A')}")
            
            # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
            csv_text = create_excel_export(record)
            print(f"DEBUG: CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(csv_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"DEBUG: CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {csv_text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º BOM –∏ –æ—Ç–¥–∞–µ–º –¢–ï–ö–°–¢ –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ base64
            csv_text_with_bom = '\ufeff' + csv_text
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"delete_emd_export_{record.get('id', 'unknown')}.csv"
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            return {
                "content": csv_text_with_bom,
                "filename": filename,
                "type": "text/csv;charset=utf-8"
            }, True, f"‚úÖ CSV —Ñ–∞–π–ª '{filename}' –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!", "success"
        else:
            return None, True, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "danger"
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        import traceback
        print(f"DEBUG: Traceback: {traceback.format_exc()}")
        return None, True, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}", "danger"

